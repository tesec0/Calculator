package com.example.util;
import java.math.BigDecimal;
public class Arith {

	// 默?除法?算精度
	private static final int DEF_DIV_SCALE = 10;

	// ???不能?例化
	private Arith() {
	}

public static String add(String v1, String v2) {
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return String.valueOf(b1.add(b2));
		}

/**
 * 提供精确的减法运算。
 *
 * @param v1
 * 被减数
 * @param v2
 * 减数
 * @return 两个参数的差
 */
public static String sub(String v1, String v2) {
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return String.valueOf(b1.subtract(b2));
		}

/**
 * 提供精确的乘法运算。
 *
 * @param v1
 * 被乘数
 * @param v2
 * 乘数
 * @return 两个参数的积
 */
public static String mul(String v1, String v2) {
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return String.valueOf(b1.multiply(b2));
		}

/**
 * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到 小数点以后10位，以后的数字四舍五入。
 *
 * @param v1
 * 被除数
 * @param v2
 * 除数
 * @return 两个参数的商
 */
public static String div(String v1, String v2) {
		return div(v1, v2, DEF_DIV_SCALE);
		}

/**
 * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指 定精度，以后的数字四舍五入。
 *
 * @param v1
 * 被除数
 * @param v2
 * 除数
 * @param scale
 * 表示表示需要精确到小数点以后几位。
 * @return 两个参数的商
 */
public static String div(String v1, String v2, int scale) {
		if (scale < 0) {
		throw new IllegalArgumentException(
		"The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1);
		BigDecimal b2 = new BigDecimal(v2);
		return String.valueOf(b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP));
		}

/**
 * 提供精确的小数位四舍五入处理。
 *
 * @param v
 * 需要四舍五入的数字
 * @param scale
 * 小数点后保留几位
 * @return 四舍五入后的结果
 */
public static String round(String v, int scale) {
		if (scale < 0) {
		throw new IllegalArgumentException(
		"The scale must be a positive integer or zero");
		}
		BigDecimal b = new BigDecimal(v);
		BigDecimal one = new BigDecimal("1");
		return String.valueOf(b.divide(one, scale, BigDecimal.ROUND_HALF_UP));
		}

		}